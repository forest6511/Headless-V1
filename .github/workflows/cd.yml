name: CD

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches:
      - main

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      - uses: actions/checkout@v4

      - name: Download JAR
        uses: actions/download-artifact@v4
        with:
          name: spring-boot-jar
          path: backend/build/libs/
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}

      - name: Install Ansible
        run: |
          sudo apt-get update
          sudo apt-get install -y ansible

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.ANSIBLE_SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          echo "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config

      - name: Create Ansible inventory
        run: |
          mkdir -p ansible/inventory
          echo "[servers]" > ansible/inventory/hosts
          echo "${{ secrets.ANSIBLE_HOST }} ansible_user=ubuntu" >> ansible/inventory/hosts

      - name: Deploy to Production
        env:
          ANSIBLE_HOST: ${{ secrets.ANSIBLE_HOST }}
          ANSIBLE_BECOME_PASS: ${{ secrets.ANSIBLE_BECOME_PASS }}
        run: |
          cd ansible
          ansible-playbook playbooks/deploy_app.yml \
            --extra-vars "ansible_become_pass=$ANSIBLE_BECOME_PASS" \
            --private-key ~/.ssh/deploy_key

  deploy-admin-frontend:
    needs: deploy-backend
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"

      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Deploy Admin Frontend
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          NEXT_PUBLIC_API_URL: ${{ secrets.PROD_API_URL }}
        run: |
          cd frontend-admin
          npm install
          npm run build
          npm install -g vercel
          vercel --prod --token $VERCEL_TOKEN --yes --confirm

  deploy-user-frontend:
    needs: deploy-backend
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"

      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Deploy User Frontend
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          NEXT_PUBLIC_API_URL: ${{ secrets.PROD_API_URL }}
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
          NEXT_PUBLIC_RECAPTCHA_SITE_KEY: ${{ secrets.NEXT_PUBLIC_RECAPTCHA_SITE_KEY }}
          RECAPTCHA_SECRET_KEY: ${{ secrets.RECAPTCHA_SECRET_KEY }}
          RESEND_FROM_EMAIL: ${{ secrets.RESEND_FROM_EMAIL }}
          RESEND_TO_EMAIL: ${{ secrets.RESEND_TO_EMAIL }}
        run: |
          cd frontend-user
          npm install
          npm run build
          npm install -g vercel
          vercel --prod --token $VERCEL_TOKEN --yes --confirm